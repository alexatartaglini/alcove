{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"acc_gen",
				"acc_gen_forward"
			],
			[
				"has_",
				"has_backward_conj"
			],
			[
				"acc_",
				"acc_conj_forward"
			],
			[
				"get_",
				"get_grammar_conj"
			],
			[
				"fil",
				"filter_blanks"
			],
			[
				"idx_",
				"idx_eval_break"
			],
			[
				"Mul",
				"MultiHead"
			],
			[
				"generate_aug",
				"generate_augment_around_right_restrict_episode"
			],
			[
				"max_le",
				"max_length_eval"
			],
			[
				"scan_tuples_",
				"scan_tuples_support_variable"
			],
			[
				"scan_tuples",
				"scan_tuples_query_variable"
			],
			[
				"fn_",
				"fn_in_model"
			],
			[
				"use",
				"use_attention"
			],
			[
				"generate_augm",
				"generate_augment_jump_restrict_episode"
			],
			[
				"nextra",
				"nextra_prims"
			],
			[
				"inc",
				"inc_support_in_query"
			],
			[
				"scan",
				"scan_tuples_variable"
			],
			[
				"variable",
				"variable_primitive_scan"
			],
			[
				"scan_p",
				"scan_primitive_tuples"
			],
			[
				"output_sym",
				"output_symbols_scan"
			],
			[
				"input_sym",
				"input_symbol_scan"
			],
			[
				"input_lang",
				"input_lang_default"
			],
			[
				"output_syb_l",
				"output_symbols_list_default"
			],
			[
				"Wra",
				"WrapperEncoderRNN"
			],
			[
				"max_",
				"max_length_eval"
			],
			[
				"scan_f",
				"scan_full_set_loaded"
			],
			[
				"adam",
				"adam_learning_rate"
			],
			[
				"dict",
				"dict_abs_to_input"
			],
			[
				"dict_",
				"dict_abs_to_output"
			],
			[
				"abstract",
				"abstract_inputs"
			],
			[
				"ab",
				"abstract_inputs"
			],
			[
				"output",
				"output_symbols"
			],
			[
				"input_",
				"input_symbols"
			],
			[
				"data_min",
				"data_mini_scan_train"
			],
			[
				"num",
				"num_episodes"
			],
			[
				"gene",
				"get_episode_generator"
			],
			[
				"viz_",
				"viz_memory_attn"
			],
			[
				"my",
				"myprediction_yq"
			],
			[
				"all_",
				"all_attention_by_query"
			],
			[
				"all",
				"all_attn_by_query"
			],
			[
				"encoder_embe",
				"encoder_embedding_steps"
			],
			[
				"Att",
				"AttnDecoderRNN"
			],
			[
				"embe",
				"embed_xq_by_step"
			],
			[
				"max_len",
				"max_length_generation"
			],
			[
				"target",
				"target_batches2"
			],
			[
				"dropou",
				"dropout_p"
			],
			[
				"dropt",
				"dropout_p"
			],
			[
				"emb",
				"embedding_size"
			],
			[
				"output_sy",
				"output_symbols_list"
			],
			[
				"epis",
				"episode_type"
			],
			[
				"M",
				"MAX_LENGTH"
			],
			[
				"unp",
				"unpacked"
			],
			[
				"generate",
				"generate_simple_rule"
			],
			[
				"tabu",
				"tabu_episodes"
			],
			[
				"gener",
				"generate_ME_episode"
			],
			[
				"sapmle_",
				"sample_ME_data"
			],
			[
				"input",
				"input_symbol_all"
			],
			[
				"output_symbo",
				"output_symbol_prims"
			],
			[
				"input_sy",
				"input_symbol_prims"
			],
			[
				"acc_val",
				"acc_val_autoencoder"
			],
			[
				"evalu",
				"evaluation_battery"
			],
			[
				"list_acc",
				"list_acc_val_autoencoder"
			],
			[
				"tabu_",
				"tabu_episodes"
			],
			[
				"num_e",
				"num_episodes_val"
			],
			[
				"nu",
				"num_episodes_val"
			],
			[
				"sample",
				"sample_data"
			],
			[
				"genera",
				"generate_prims"
			],
			[
				"variab",
				"variableFromSymbols"
			],
			[
				"EOS",
				"EOS_token"
			],
			[
				"target_",
				"target_batches"
			],
			[
				"ns",
				"n_symbols"
			],
			[
				"n",
				"n_symbols"
			],
			[
				"num_eo",
				"num_episodes"
			],
			[
				"trial",
				"trial_count"
			],
			[
				"assig",
				"assign_grounding"
			],
			[
				"n_tra",
				"n_trial_exclude"
			],
			[
				"G_arou",
				"G_around_alt2"
			],
			[
				"G_a",
				"G_around_alt"
			],
			[
				"tasks_Sub",
				"tasks_sub_test"
			],
			[
				"log_pmap_",
				"log_pmap_generic"
			],
			[
				"inpt",
				"input_options"
			],
			[
				"out",
				"output_options"
			],
			[
				"gn",
				"generic_output_symbol"
			],
			[
				"list_rules_",
				"list_rules_general"
			],
			[
				"list_r",
				"list_rules_one2one"
			],
			[
				"log_pr",
				"log_prior_ME"
			],
			[
				"R",
				"R"
			],
			[
				"varia",
				"variable_symbols"
			],
			[
				"nswap",
				"nswap"
			],
			[
				"MH",
				"MHPermuteSampler"
			],
			[
				"diff",
				"show_diff"
			],
			[
				"valid",
				"valid_rule"
			],
			[
				"load",
				"load_fixed_tasks"
			],
			[
				"is_",
				"is_prim"
			],
			[
				"is",
				"is_var"
			],
			[
				"prim",
				"prim_regexp"
			],
			[
				"board",
				"board_id"
			],
			[
				"fn",
				"fn_board"
			],
			[
				"fsize",
				"fsize_2"
			],
			[
				"pad",
				"padding_size"
			],
			[
				"inpu",
				"input_size"
			],
			[
				"in",
				"input_size"
			],
			[
				"PTB",
				"PTBInput"
			],
			[
				"bat",
				"batch_size"
			],
			[
				"get",
				"get_hidden_activation"
			],
			[
				"mode",
				"model_checkpoint_path"
			],
			[
				"ci",
				"CIFAR10"
			],
			[
				"fs",
				"fsize_1"
			],
			[
				"fsi",
				"fsize_2"
			],
			[
				"nch",
				"nchannel_2"
			],
			[
				"action",
				"action_name"
			]
		]
	},
	"buffers":
	[
		{
			"file": "alcove.py",
			"settings":
			{
				"buffer_size": 5566,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "out.txt",
			"settings":
			{
				"buffer_size": 56488,
				"line_ending": "Unix"
			}
		},
		{
			"file": "data/shj_stimuli.txt",
			"settings":
			{
				"buffer_size": 48,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "0,0,0"
			}
		},
		{
			"file": "data/shj_labels.txt",
			"settings":
			{
				"buffer_size": 95,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/LaTeX.sublime-build",
					""
				],
				[
					"Packages/User/LaTeX.sublime-build",
					"Build Bibliography"
				]
			],
			[
				"Packages/User/LaTeX.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "Vi",
		"selected_items":
		[
			[
				"Vi",
				"Virtualenv: New"
			],
			[
				"Package Control: In",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/Brenden/Documents/NYU/teaching/teaching-2019-2020/cc_code",
		"/Users/Brenden/Documents/NYU/teaching/teaching-2019-2020/cc_code/data"
	],
	"file_history":
	[
		"/Users/Brenden/Documents/NYU/teaching/teaching-2019-2020/cc_code/out.txt",
		"/Users/Brenden/Sites/nyu_webpage/index.html",
		"/Users/Brenden/Desktop/notes_oregon_meetin.txt",
		"/Users/Brenden/Documents/NYU/code/CTB/psychometrics/split-half/split_half.py",
		"/Users/Brenden/Documents/NYU/code/CTB/psychometrics/data2.csv",
		"/Users/Brenden/Documents/NYU/AA_Readme/FAQ.txt",
		"/Users/Brenden/Documents/NYU/code/CTB/DK_reliability/data_kitty.py",
		"/Users/Brenden/Desktop/sri_convo.txt",
		"/Users/Brenden/Documents/NYU/AA_Readme/frequent_flier.txt",
		"/Users/Brenden/Documents/NYU/applications/2019-2029-Applications/2019-notable-apps.txt",
		"/Users/Brenden/Documents/NYU/AA_Readme/lab_FAQ/lab_FAQ.txt",
		"/Users/Brenden/Desktop/huawei.txt",
		"/Users/Brenden/Documents/NYU/AA_Readme/NYU_accounts.txt",
		"/Users/Brenden/Documents/NYU/code/GSCAN/grounded-scan/grammar.py",
		"/Users/Brenden/Documents/NYU/code/GSCAN/grounded-scan/main.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/notes.txt",
		"/Users/Brenden/Documents/NYU/CV/research-statement/statement.tex",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/analysis/analysis_rules.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/generate_episode.py",
		"/Users/Brenden/Documents/NYU/code/SCAN-exp/psiturk-biases-v2/static/js/scan_stimuli_simple.js",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/train_metanet_attn.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/metanet_attn.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/interpret_grammar.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/test.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/.gitignore",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/analysis/out_net_attn_normal_rules.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/out.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/test_metanet_attn.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/transformer.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/out_models/res_test_meta_mh.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/README.md",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/masked_cross_entropy.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/dev_meta_seq2seq/temp.py",
		"/Users/Brenden/Desktop/CTB/data.csv",
		"/Users/Brenden/Downloads/torch-multi-head-attention-0.15.1/torch_multi_head_attention/multi_head_attention.py",
		"/Users/Brenden/Desktop/guy_davidson_notes.txt",
		"/Users/Brenden/Documents/NYU/applications/2018-2019-Applications/postdoc_ads/postdoc_ads.txt",
		"/Users/Brenden/Desktop/interview.txt",
		"/Users/Brenden/Documents/NYU/code/L-systems/analysis/README.txt",
		"/Users/Brenden/Documents/NYU/code/L-systems/analysis/analysis_generative.py",
		"/Users/Brenden/Documents/NYU/code/L-systems/README.txt",
		"/Users/Brenden/Documents/library_clean.py",
		"/Users/Brenden/Documents/publications_latex/neurIPS2019/LatexCompLearning_REVISED/neurips_2019_revised.tex",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/train_metanet_attn.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/test_metanet_attn.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/NeurIPS_around_right/res_test_scan_around_right_original_rep1.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/NeurIPS_around_right/res_test_scan_all_augment_around_right_rep1.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/NeurIPS_around_right/res_test_scan_all_augment_around_right_rep3.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/run_metanet2.sh",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/out.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/data/tasks_test_addprim_turn_left.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/data/tasks_train_addprim_turn_left.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/generate_episode.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/data/tasks_test_examine.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/data/tasks_train_all.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/experimental/data.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/experimental/analze_errors.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/NeurIPS_around_right/res_test_scan_all_extra_around_right_res_rep5.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/run_metanet1.sh",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/NeurIPS_around_right/res_test_scan_all_extra_around_right_res_rep1.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/test_seq2seq.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/out_models/res_test_scan_all_extra_around_right_res_rep1.txt",
		"/Users/Brenden/Downloads/danish.txt",
		"/Users/Brenden/Downloads/workshop_proposal.txt",
		"/Users/Brenden/Downloads/tasks_test_template_around_right.txt",
		"/Users/Brenden/Downloads/tasks_train_template_around_right.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/README.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/NeurIPS_full/res_test_scan_all_extra_rep1.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/data/tasks_test_length2.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/attn_notes.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/NeurIPS_length/res_test_scan_length_original_rep3.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/NeurIPS_length/res_test_scan_length_original_rep5.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/NeurIPS_length/res_test_scan_length_rep4.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/NeurIPS_length/res_test_scan_length_extra_rep4.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/NeurIPS_full/res_test_scan_all_extra_rep5.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/NeurIPS_length/res_test_scan_length_rep1.txt",
		"/Users/Brenden/Desktop/tweet.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/run_metanet3.sh",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/.gitignore",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/test.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/metanet_attn.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/interpret_grammar.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/NeurIPS_ablation/res_train_scan_simple_seq2seq_rep3.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/out2.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/.gitignore",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/data/tasks_test_addprim_jump.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/out_models_scan_seq2seq/res_test_scan_jump_rep1.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/out_models_scan_meta/res_test_scan_all_extra_rep1.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/out_models_scan_meta/net_scan_all_augment_rep2.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/run_metanet.sh",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/temp.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/batch_RNN/model_seq2seq_batch.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/RNN_SCAN/train.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/out.xt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/masked_cross_entropy.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/batch_RNN/data_loader_batch.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/meta_net/generate_episode_procedural_scan.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/batch_RNN/results_may17/cluster_analysis.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/batch_RNN/cluster_analysis.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/train_metanet_attn.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/batch_RNN/model_seq2seq_batch.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/batch_RNN/train_seq2seq_batch.py",
		"/Users/Brenden/Documents/NYU/grants/DARPA-MCS/drapa-kickoff-notes.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/RNN_SCAN/model.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/metanet_attn.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/masked_cross_entropy.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/archive_metanet_attn.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/out.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/generate_episode.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/test.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/interpret_grammar.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/RNN_SCAN/rnn-scan-like-notes.key",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/RNN_SCAN/run_best_nn.sh",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/RNN_SCAN/run_attn.sh",
		"/Users/Brenden/Desktop/hw3_grading/grades_hw3.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/data/scan_tasks_all.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/temp.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/scan_tasks_all.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/train_metanet.py",
		"/Users/Brenden/Desktop/sym.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/metanet.py",
		"/Users/Brenden/Downloads/notes_reuben_talk.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/train_metanet_seq2seq.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/meta_learning_SCAN/train_autoencoder.py",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/RNN_SCAN/results/results_train_color.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/RNN_SCAN/data/data_test_psiturk.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/RNN_SCAN/results/results_test_color.txt",
		"/Users/Brenden/Documents/NYU/code/NN-SCAN-LIKE/RNN_SCAN/results/results_train_color_dropout.txt"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"ncat",
			"\t\t# print(hidden)",
			"rand",
			"permutation",
			"v_error",
			"2",
			"1",
			"we must seek",
			"dict_abs_to_input",
			"generate_free",
			"miniscan",
			"sample_mini_scan",
			"mini_scan",
			"concat",
			"\"concat\"",
			"make_pcfg_for_data_gen",
			"sample_from_pcfg",
			"sample_data",
			"generate_random_rules",
			"generate_rules",
			"generate_ME_episode",
			"get_episode_generator",
			"evaluation_battery",
			"my_item",
			"np.array(",
			"fname",
			"_forward",
			".RHS",
			".LHS",
			"print(",
			".LHS",
			"b'",
			"dax fep gazzer",
			"dax gazzer fep",
			"100.0",
			"viz_decoder_attn",
			"viz_",
			"fep lug",
			"Hydra",
			"hydra",
			"hyrdra",
			"extra",
			"TransformerContext",
			"episode_type",
			"episode_Type",
			"TransformerContextConcat",
			"_1",
			"Transformer",
			"sequence_mask",
			"MultiHeadAttn",
			"TransformerContextConcat",
			"TransformerLayer",
			"nn.Tanh",
			"MultiMetaNet",
			"forward_mask",
			"Norm",
			"ME_concat",
			"forward_mask",
			"assert(",
			"DEBUG",
			"train",
			"mask",
			"sequence_mask",
			"d_model",
			"TransformerLayer",
			"self.dropout(",
			"self.dropout",
			"nn.Dropout",
			"Transform",
			"TransformerLayer",
			"Transformer",
			"dim",
			"for _",
			"is_cuda",
			"MultiHead",
			".cuda",
			"list_multi_head",
			"MultiHead",
			"for _",
			"relu",
			"MultiHead",
			"value_dim",
			"_Q",
			"MetaN",
			"Multi",
			"MultiMetNet",
			"self.nlayers_attn",
			"MultiMetaNet",
			"MultiMetaNet\nMultiMetaNet\nMultiMetaNet",
			"MetaNetRNN",
			"MetaNet",
			"MetaNetRNN",
			"rules",
			"generate_rules_episode",
			"rules",
			"evaluate(",
			"evaluate",
			"viz_decoder_attn",
			"jump",
			"attn(",
			"Attn(",
			"forward_mask",
			"mask",
			"train(",
			"Attn(",
			"add_sos",
			"pad_seq",
			"build_padded_var",
			"yq_padded",
			"add_sos",
			"_sos_",
			"=2",
			"loss(",
			"pad_seq",
			"PAD_token",
			"assert(",
			"assert(False)",
			".shape",
			"generate_autoencoder_episode",
			"auto",
			"SOS_token",
			"yq_padded",
			"'yq_padded'",
			"get_number_opt_actions",
			"(3,3)",
			"(3.5,3.5)",
			"savefig",
			"4,4"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"\t",
			"",
			"I_JUMP",
			"I_WALK",
			"I_TURN_LEFT",
			"I_TURN_RIGHT",
			"No",
			"Yes"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "alcove.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5566,
						"regions":
						{
						},
						"selection":
						[
							[
								2873,
								2873
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1067.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "out.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 56488,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "data/shj_stimuli.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 48,
						"regions":
						{
						},
						"selection":
						[
							[
								48,
								48
							]
						],
						"settings":
						{
							"auto_name": "0,0,0",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "data/shj_labels.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 95,
						"regions":
						{
						},
						"selection":
						[
							[
								95,
								95
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 372.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 173.0
	},
	"pinned_build_system": "Packages/User/LaTeX.sublime-build",
	"project": "alcove.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"gene",
				"generate_episode.py"
			],
			[
				"train",
				"train_metanet_attn.py"
			],
			[
				"meta",
				"metanet_attn.py"
			],
			[
				"mask",
				"masked_cross_entropy.py"
			],
			[
				".gi",
				".gitignore"
			],
			[
				"test",
				"meta_learning_SCAN/meta_net/test_metanet_attn.py"
			],
			[
				"gener",
				"meta_learning_SCAN/meta_net/generate_episode.py"
			],
			[
				"gen",
				"meta_learning_SCAN/meta_net/generate_episode.py"
			],
			[
				"out.",
				"meta_learning_SCAN/out.txt"
			],
			[
				"grammar",
				"meta_learning_SCAN/interpret_grammar.py"
			],
			[
				"ep",
				"meta_learning_SCAN/generate_episode.py"
			],
			[
				"att",
				"meta_learning_SCAN/metanet_attn.py"
			],
			[
				"meat",
				"meta_learning_SCAN/metanet_attn.py"
			],
			[
				"",
				"meta_learning_SCAN/masked_cross_entropy.py"
			],
			[
				"mak",
				"meta_learning_SCAN/masked_cross_entropy.py"
			],
			[
				"inter",
				"meta_learning_SCAN/interpret_grammar.py"
			],
			[
				"trian.py",
				"RNN_SCAN/train.py"
			],
			[
				"mode",
				"RNN_SCAN/model.py"
			],
			[
				"metanet",
				"meta_learning_SCAN/metanet.py"
			],
			[
				"mea",
				"meta_learning_SCAN/metanet_attn.py"
			],
			[
				"model",
				"RNN_SCAN/model.py"
			],
			[
				"train.",
				"RNN_SCAN/train.py"
			],
			[
				"temp",
				"meta_learning_SCAN/temp.py"
			],
			[
				"genera",
				"meta_learning_SCAN/generate_episode.py"
			],
			[
				"resu",
				"RNN_SCAN/results/results_test_psiturk.txt"
			],
			[
				"trainval",
				"scripts/train/few_shot/trainval.py"
			],
			[
				"eval",
				"scripts/predict/few_shot/eval_within_alphabet.py"
			],
			[
				"run_eval",
				"scripts/predict/few_shot/run_eval.py"
			],
			[
				"base",
				"protonets/data/base.py"
			],
			[
				"train.py",
				"scripts/train/few_shot/run_train.py"
			],
			[
				"omin",
				"protonets/data/omniglot.py"
			],
			[
				"modl",
				"protonets/utils/model.py"
			],
			[
				"data",
				"protonets/utils/data.py"
			],
			[
				"setup",
				"setup.py"
			],
			[
				"dwon",
				"download_omniglot.sh"
			],
			[
				"scan",
				"static/js/scan_stimuli_simple.js"
			],
			[
				"co",
				"config.txt"
			],
			[
				"ad",
				"templates/ad.html"
			],
			[
				"task",
				"static/js/task.js"
			],
			[
				"config",
				"config.txt"
			],
			[
				"conse",
				"templates/consent.html"
			],
			[
				"tasks",
				"static/js/task.js"
			],
			[
				"pre",
				"templates/prequiz.html"
			],
			[
				"sin",
				"templates/instructions/instruct-2.html"
			],
			[
				"stage",
				"templates/stage.html"
			],
			[
				"preq",
				"templates/prequiz.html"
			],
			[
				"post",
				"templates/postquestionnaire.html"
			],
			[
				"quiz",
				"templates/prequiz.html"
			],
			[
				"inst",
				"templates/instructions/instruct-1.html"
			],
			[
				"hy",
				"hypothesis.py"
			],
			[
				"sampl",
				"samplers.py"
			],
			[
				"hypo",
				"hypothesis.py"
			],
			[
				".git",
				".gitignore"
			],
			[
				"main",
				"main.py"
			],
			[
				"cifar",
				"cifar10/cifar10_train.py"
			],
			[
				"te",
				"cifar10/temp.py"
			],
			[
				"cif",
				"cifar10/cifar10_train.py"
			],
			[
				"se",
				"tutorials/sequence_models_tutorial.py"
			],
			[
				"eva",
				"cifar10/eval_shape_bias.py"
			],
			[
				"nn",
				"tutorials/nn_tutorial.py"
			],
			[
				"ci",
				"tutorials/cifar10_tutorial.py"
			],
			[
				"ptb",
				"lstm/ptb_word_lm.py"
			],
			[
				"reader",
				"lstm/reader.py"
			],
			[
				".g",
				".gitignore"
			],
			[
				"ince",
				"cifar10/inception.py"
			],
			[
				"cifar10_input",
				"cifar10/cifar10_input.py"
			],
			[
				"mnist",
				"mnist_convnet.py"
			],
			[
				"cifa",
				"cifar10/cifar10_input.py"
			],
			[
				"in",
				"cifar10/inception.py"
			],
			[
				"inc",
				"cifar10/inception.py"
			],
			[
				"clas",
				"cifar10/classify_image.py"
			],
			[
				"tem",
				"temp.py"
			],
			[
				"ec",
				"EC_agent.py"
			],
			[
				"al",
				"ale_experiment.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 254.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
